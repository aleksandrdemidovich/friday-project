{"version":3,"sources":["HeaderMain/HeaderBtn/HeaderBtn.module.css","components/common/appError/AppError.module.css","components/c2-SuperButton/SuperButton.module.css","components/c3-SuperCheckbox/SuperCheckbox.module.css","components/common/InputMail/InputMail.module.css","components/common/btnShowCards/BtnShowCards.module.css","components/common/subtitle/Subtitle.module.css","components/common/Preloader/Preloader.module.css","components/common/Title/Title.module.css","pages/PacksList/BtnActions/BtnActions.module.css","pages/PacksList/PacksList.module.css","pages/CardsList/CardsList.module.css","components/common/Preloader/Preloader.tsx","components/common/Title/Title.jsx","redux/authReducer.ts","components/common/appError/AppError.tsx","api/instanceAPI.ts","api/authAPI.ts","redux/app-reducer.ts","utils/errorResponseHandler.ts","pages/signUp/SignUP.tsx","pages/Profile/Profile.tsx","pages/Error404.tsx","pages/ForgotPassword/ForgotPassword.tsx","pages/ForgotPassword/NewPassword.tsx","components/c2-SuperButton/SuperButton.tsx","components/c3-SuperCheckbox/SuperCheckbox.tsx","components/c1-SuperInputText/SuperInputText.tsx","pages/CardsList/Rating/Rating.tsx","pages/Test.tsx","pages/Login/Login.tsx","pages/Login/LoginContainer.tsx","pages/Login/LoginPage.tsx","assets/images/letter.svg","pages/ForgotPassword/CheckEmail.tsx","api/packs-api.ts","api/cards-api.ts","redux/cardPacksReducer.ts","utils/formattingDate.ts","pages/PacksList/BtnActions/BtnActions.tsx","pages/PacksList/AlertDialogForDeleteValue.tsx","pages/PacksList/AlertDialogForEditValue.tsx","pages/PacksList/AlertDialogForNewValue.tsx","components/common/btnShowCards/BtnShowCards.tsx","components/common/subtitle/Subtitle.jsx","pages/PacksList/Pagination/UsePagination.tsx","pages/PacksList/Select/Select.tsx","pages/PacksList/PacksList.tsx","pages/CardsList/CardsList.tsx","pages/LearnPage/LearnPage.tsx","pages/Routes.tsx","HeaderMain/HeaderBtn/HeaderBtn.tsx","assets/images/pack-list.svg","assets/images/profile.svg","HeaderMain/HeaderMain.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","pages/signUp/SignUp.module.css","pages/ForgotPassword/ForgotPassword.module.css","pages/Login/Login.module.css","pages/ForgotPassword/NewPassword.module.css","components/c1-SuperInputText/SuperInputText.module.css","pages/Error404.module.css","pages/ForgotPassword/CheckEmail.module.css","HeaderMain/HeaderMain.module.css"],"names":["module","exports","Preloader","className","s","preloader","CircularProgress","Title","title","AuthEvents","AppError","props","appError","Alert","errorRed","severity","error","instance","axios","create","baseURL","withCredentials","authAPI","me","a","post","response","data","login","email","password","rememberMe","logout","delete","console","log","passRecovery","message","from","inputNewPass","resetPasswordToken","signUp","initialState","status","isInitialized","setAppStatus","payload","type","setAppError","errorResponseHandler","e","dispatch","isAxiosError","user","isLoggedIn","authActions","SET_USER_DATA","LOGOUT","SET_EMAIL","SignUp","useSelector","state","app","useDispatch","formik","useFormik","initialValues","confirmPassword","validate","values","errors","test","length","onSubmit","then","res","catch","resetForm","to","PATH","LOGIN","subtitle","FormBox","handleSubmit","registrWrap","label","field","id","name","onChange","handleChange","value","placeholder","onBlur","handleBlur","touched","style","color","inputWrap","btnWrap","btnLeft","onClick","handleReset","btnRight","disabled","Profile","auth","src","avatar","width","height","alt","Error404","wrap","notfound","notfound404","navLink","PROFILE","ForgotPassword","appStatus","CHECK_EMAIL","forgotPassword","formBox","textLight","btnBlue","boxLink","linkBlue","Snackbar","open","autoHideDuration","position","bottom","left","NewPassword","token","useParams","newPassword","margin","autoComplete","SuperButton","red","restProps","finalClassName","default","SuperCheckbox","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","finalSpanClassName","input","errorInput","superInput","htmlFor","key","placeHolder","hidePlaceHolder","StyledRating","styled","Rating","marginRight","fontSize","MainRating","precision","emptyIcon","defaultValue","rating","max","Test","Login","getFieldProps","React","useState","showPassword","setShowPassword","TextField","variant","s1","FormControl","Input","endAdornment","InputAdornment","IconButton","aria-label","VisibilityOff","Visibility","FormControlLabel","control","Checkbox","linkTransparent","FORGOT_PASSWORD","linkWrap","SIGN_UP","LoginContainer","loginTC","LoginPage","CheckEmail","checkEmail","letterImg","packsAPI","get","params","cardsPack","idPack","put","cardsAPI","card","idCard","grade","card_id","currentCardPacks","cardPacks","page","pageCount","cardPacksTotalCount","minCardsCount","min","maxCardsCount","packName","sortPacks","currentCards","cards","cardsTotalCount","maxGrade","minGrade","packUserId","sortCards","cardName","currentPackName","currentCardsPackId","user_id","newCardsPack","path","shots","deckCover","private","newCard","cardsPack_id","question","answer","answerImg","questionImg","questionVideo","answerVideo","setCardPacks","setSortPacks","setCurrentPackName","setCurrentCardsPackID","setSearchCardName","changeGradeCard","setUserId","requestCardPack","getState","requestData","requestCards","cardQuestion","formattingDate","date","dateObj","Date","day","getDate","month","getMonth","formattedDay","formattedMonth","getFullYear","BtnActions","btn","AlertDialogForDeleteValue","handleClose","setOpenAlertDialogForDeletePack","background","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","alertTitle","DialogContent","DialogContentText","DialogActions","Button","packId","autoFocus","AlertDialogForEditValue","newName","setNewName","setOpenAlertDialogForEditPack","fullWidth","inputLabel","_id","fetchEditCard","AlertDialogForNewValue","setName","setOpenAlertDialogForNewPack","buttonName","float","newPackName","idCurrentCardsPack","BtnShowCards","btnShowCards","Subtitle","subtitleWrap","List","listStyle","display","alignItems","UsePagination","items","usePagination","count","map","index","selected","item","backgroundColor","borderRadius","border","fontFamily","lineHeight","cursor","BootstrapInput","InputBase","textAlign","padding","transition","theme","transitions","join","borderColor","boxShadow","CustomizedSelects","sx","m","Select","toString","displayEmpty","event","target","MenuItem","PacksList","dataPacksList","currentPage","idAuthorizedUser","userIdForRequest","totalCount","openAlertDialogForDeletePack","openAlertDialogForEditPack","openAlertDialogForNewPack","searchPackName","setSearchPackName","setValue","sort","setSort","history","useHistory","useEffect","handler","setTimeout","clearTimeout","range","toggleFilter","style1","style2","styleBtnLearn","createTheme","components","MuiSlider","styleOverrides","root","touchAction","packsList","contentLeft","titleForButtons","titleForSlider","sliderWrap","ThemeProvider","Slider","newValue","activeThumb","valueLabelDisplay","contentRight","contentRightTop","search","right","top","tableWrap","table","tableHeader","tr","th","scrollTableBody","pack","td","push","CARDS_LIST","cardsCount","updated","user_name","btnBox","LEARN_PAGE","contentRightBottom","Math","ceil","choiceCard","CardsList","dataCardsList","currentPackId","cardUserID","searchCardsName","setSearchCardsName","currentCardName","cardsList","titleBox","rowBtn","transform","startIcon","goBack","searchBox","centerText","contentBottom","grades","getCard","sum","reduce","acc","rand","random","i","newSum","LearnPage","isChecked","setIsChecked","first","setFirst","setGrade","comments","created","setCard","Card","minHeight","CardActions","component","FormLabel","RadioGroup","g","Radio","updatedGrade","fetchUpdateCard","ERROR_404","NEW_PASSWORD","TEST","PACKS_LIST","Routes","exact","render","HeaderBtn","priorityStyle","isActive","headerBtn","active","img","HeaderMain","useLocation","pathname","routeChange","headerMain","wrapper","imgPackList","imgProfile","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fa6c81e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBtn\":\"HeaderBtn_headerBtn__hUmM-\",\"active\":\"HeaderBtn_active__4zhsw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appError\":\"AppError_appError__2KEJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2tZIj\",\"focus-visible\":\"SuperButton_focus-visible__9h7-y\",\"red\":\"SuperButton_red__HzRdF\",\"button-24\":\"SuperButton_button-24__1nia5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1MDne\",\"spanClassName\":\"SuperCheckbox_spanClassName__12xAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputMail_input__2edZE\",\"InputMail\":\"InputMail_InputMail__209C0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"BtnShowCards_btn__3877p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"Subtitle_subtitle__1shbW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3qIYi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__W18_g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"BtnActions_btn__2zb24\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsList\":\"PacksList_packsList__1EFSF\",\"contentLeft\":\"PacksList_contentLeft__3jmeT\",\"titleForButtons\":\"PacksList_titleForButtons__3paX6\",\"titleForSlider\":\"PacksList_titleForSlider__pkUmf\",\"btnWrap\":\"PacksList_btnWrap__cNOzX\",\"contentRight\":\"PacksList_contentRight__1wj06\",\"contentRightTop\":\"PacksList_contentRightTop__1rTYx\",\"btnBlue\":\"PacksList_btnBlue__12QYF\",\"search\":\"PacksList_search__3BJjr\",\"table\":\"PacksList_table__37cZm\",\"tableHeader\":\"PacksList_tableHeader__3kx4W\",\"scrollTableBody\":\"PacksList_scrollTableBody___ufet\",\"tr\":\"PacksList_tr__1EygD\",\"td\":\"PacksList_td__2knhV\",\"th\":\"PacksList_th__1z1g0\",\"btnBox\":\"PacksList_btnBox__1HM0u\",\"contentRightBottom\":\"PacksList_contentRightBottom__3BdWv\",\"pagination\":\"PacksList_pagination__1QD9r\",\"choiceCard\":\"PacksList_choiceCard__2PvCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsList\":\"CardsList_cardsList__wBgXy\",\"titleBox\":\"CardsList_titleBox__1arFr\",\"rowBtn\":\"CardsList_rowBtn__3loy6\",\"searchBox\":\"CardsList_searchBox__mcoZU\",\"search\":\"CardsList_search__3Ii1l\",\"centerText\":\"CardsList_centerText__2JkGE\",\"table\":\"CardsList_table__CUJf1\",\"tableHeader\":\"CardsList_tableHeader__2DXkZ\",\"scrollTableBody\":\"CardsList_scrollTableBody__2hY7Q\",\"tr\":\"CardsList_tr__1yzLw\",\"td\":\"CardsList_td__O_D8f\",\"th\":\"CardsList_th__IBP57\",\"btnBox\":\"CardsList_btnBox__g24k6\",\"contentBottom\":\"CardsList_contentBottom__H_js5\",\"choiceCard\":\"CardsList_choiceCard__2vrq8\"};","import s from \"./Preloader.module.css\"\r\nimport React from 'react'\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={s.preloader}>\r\n         <CircularProgress />\r\n        </div>\r\n    )\r\n}","import s from \"./Title.module.css\"\r\n\r\n\r\nexport default function Title() {\r\n  return (\r\n    <div className={s.title}>\r\n        <h2>It-incubator</h2>    \r\n    </div>\r\n  );\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppActionsType, setAppError, setAppStatus, setIsInitialized} from \"./app-reducer\";\r\nimport errorResponseHandler from \"../utils/errorResponseHandler\";\r\n\r\nexport enum AuthEvents {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    LOGOUT = 'LOGOUT',\r\n    SET_EMAIL = 'SET_EMAIL',\r\n}\r\n\r\n//types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AuthStateType = {\r\n    user: IUser | null\r\n    isLoggedIn: boolean\r\n    email: string\r\n}\r\n\r\nexport const initialState: AuthStateType = {\r\n    user: null,\r\n    isLoggedIn: false,\r\n    email: ''\r\n}\r\n\r\nexport type  IUser = {\r\n    _id: string\r\n    avatar: string\r\n    email: string\r\n    name: string\r\n    token: string\r\n    tokenDeathTime: number\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type InferActionsType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type AuthActionsType = InferActionsType<typeof authActions>\r\n\r\nexport type AuthAppActionsType = AuthActionsType | AppActionsType\r\n\r\n// reducer\r\nexport const authReducer = (state = initialState, action: AuthActionsType) => {\r\n    switch (action.type) {\r\n        case AuthEvents.SET_USER_DATA:\r\n            return {...state, user: action.payload, isLoggedIn: true}\r\n        case AuthEvents.LOGOUT:\r\n            return {...state, isLoggedIn: false, user: null}\r\n        case AuthEvents.SET_EMAIL:\r\n            return {...state, email: action.email};\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// actions creators\r\nexport const authActions = {\r\n    setUserData: (payload: IUser) => {\r\n        return {\r\n            type: AuthEvents.SET_USER_DATA,\r\n            payload\r\n        } as const\r\n    },\r\n    logout: () => {\r\n        return {\r\n            type: AuthEvents.LOGOUT\r\n        } as const\r\n    },\r\n    setEmail: (email: string) => {\r\n        return {\r\n            type: AuthEvents.SET_EMAIL,\r\n            email\r\n        } as const\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkAction<void, AppStateType, {}, AuthAppActionsType> => async (dispatch) => {\r\n    dispatch(setAppError({error: ''}))\r\n    dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const data = await authAPI.login(email, password, rememberMe);\r\n        dispatch(authActions.setUserData(data))\r\n        dispatch(setAppStatus({status:'idle'}))\r\n    } catch (e: any) {\r\n        // const error = e.response ? e.response.data.error : (e.message + \", more details in the console\")\r\n        // dispatch(setAppError({error}))\r\n        // dispatch(setAppStatus({status:'failed'}))\r\n        errorResponseHandler(e, dispatch)\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const initializingTC = (): ThunkAction<void, AppStateType, {}, AuthAppActionsType> => async (dispatch) => {\r\n    dispatch(setAppError({error: ''}))\r\n    dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const data = await authAPI.me()\r\n        dispatch(authActions.setUserData(data))\r\n        dispatch(setAppStatus({status:'idle'}))\r\n    } catch (e: any) {\r\n        const error = e.response ? e.response.data.error : (e.message + \", more details in the console\")\r\n        dispatch(setAppError({error}))\r\n        dispatch(setAppStatus({status:'failed'}))\r\n    } finally {\r\n        dispatch(setIsInitialized({isInitialized:true}))\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): ThunkAction<void, AppStateType, {}, AuthAppActionsType> => async (dispatch) => {\r\n    dispatch(setAppError({error: ''}))\r\n    dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const response = await authAPI.logout()\r\n        dispatch(authActions.logout())\r\n        dispatch(setAppStatus({status:'idle'}))\r\n        return response\r\n    } catch (e:any) {\r\n        // const error = e.response ? e.response.data.error : (e.message + \", more details in the console\")\r\n        // dispatch(setAppError({error}))\r\n        // dispatch(setAppStatus({status:'failed'}))\r\n    }\r\n\r\n}\r\n\r\nexport const setNewUserTC = (email: string, password: string):ThunkAction<void, AppStateType, {}, AuthAppActionsType> => (dispatch) => {\r\n    dispatch(setAppStatus({status:'loading'}))\r\n    authAPI.signUp(email, password)\r\n        .then((res) => {\r\n            console.log(res.data)\r\n            dispatch(setAppStatus({status:'succeeded'}))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response ? e.response.data.error : (e.message + \", more details in the console\")\r\n            dispatch(setAppError({error}))\r\n            dispatch(setAppStatus({status:'failed'}))\r\n        })\r\n}\r\n\r\nexport const passwordRecovery = (email: string, message: string):ThunkAction<void, AppStateType, {}, AuthAppActionsType> => async (dispatch) => {\r\n    try {\r\n        dispatch(setAppError({error: ''}))\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        await authAPI.passRecovery(email, message);\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n        dispatch((authActions.setEmail(email)))\r\n    } catch (e: any) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport const inputNewPassword = (password: string, resetPasswordToken: string | undefined):ThunkAction<void, AppStateType, {}, AuthAppActionsType> => async (dispatch) => {\r\n    try {\r\n        dispatch(setAppError({error: ''}))\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        await authAPI.inputNewPass(password, resetPasswordToken);\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n","import s from './AppError.module.css'\r\nimport Alert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\n\r\n\r\ntype AppErrorPropsType = {\r\n    error:string\r\n}\r\n\r\n\r\nexport const AppError = (props:AppErrorPropsType) => {\r\n    return (\r\n        <div className={s.appError}>\r\n            <Alert className={s.errorRed}  severity=\"error\">{props.error}</Alert>          \r\n        </div>\r\n    )\r\n}\r\n// style={{color: 'red'}}","import axios from \"axios\";\r\n\r\nconst baseURL = 'https://neko-back.herokuapp.com/2.0/';\r\n// const baseURL = \"http://localhost:7542/2.0/\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: baseURL,\r\n    withCredentials: true,\r\n});","\r\nimport {instance} from \"./instanceAPI\";\r\nimport {IUser} from \"../redux/authReducer\";\r\n\r\n\r\nexport type DefaultResponseType = {\r\n    info: string,\r\n    error?: string\r\n}\r\n\r\nexport type SignUpDataType = {\r\n    error?: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me: async () => {\r\n        const response = await instance.post<IUser>('auth/me')\r\n        return response.data\r\n    },\r\n    login: async (email: string, password: string, rememberMe: boolean) => {\r\n        const response = await instance.post<IUser>('auth/login', {email, password, rememberMe})\r\n        return response.data\r\n    },\r\n    logout: async () => {\r\n        const response = await instance.delete<DefaultResponseType>('auth/me')\r\n        console.log('LOGOUT: ', response.data)\r\n        return response.data\r\n    },\r\n    passRecovery(email: string, message: string) {\r\n        return instance.post<DefaultResponseType>('auth/forgot', {\r\n            email,\r\n            message,\r\n            from: \"front-admin <demid.kbr@mail.ru>\"\r\n        })\r\n    },\r\n    inputNewPass(password: string, resetPasswordToken: string | undefined) {\r\n        return instance.post<DefaultResponseType>('auth/set-new-password', {password, resetPasswordToken})\r\n    },\r\n    signUp(email: string, password: string) {\r\n        return instance.post<SignUpDataType>('auth/register', {email, password})\r\n    }\r\n}","export type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    status: AppStatusType\r\n    error: string\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: '',\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-APP-STATUS':\r\n            return {...state, status: action.payload.status};\r\n        case 'SET-APP-ERROR':\r\n            return {...state, error: action.payload.error}\r\n        case 'SET-APP-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.payload.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatus = (payload: { status: AppStatusType }) => ({type: 'SET-APP-STATUS', payload} as const)\r\nexport const setAppError = (payload: { error: string }) => ({type: 'SET-APP-ERROR', payload} as const)\r\nexport const setIsInitialized = (payload: { isInitialized: boolean }) => ({\r\n    type: 'SET-APP-IS-INITIALIZED',\r\n    payload\r\n} as const)\r\n\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setIsInitialized>","import {setAppError, setAppStatus} from \"../redux/app-reducer\";\r\nimport axios from \"axios\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport default function errorResponseHandler(e: any, dispatch: Dispatch) {\r\n    if (axios.isAxiosError(e) && e.response) {\r\n        dispatch(setAppError({error: e.response.data.error}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occurred, check your connection.'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import s from \"./SignUp.module.css\"\r\nimport React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport { AppError } from \"../../components/common/appError/AppError\";\r\nimport {authActions, RequestStatusType, setNewUserTC} from \"../../redux/authReducer\";\r\nimport {AppStatusType, setAppError} from \"../../redux/app-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nfunction SignUp() {\r\n\r\n    const error = useSelector<AppStateType, string | null>(state => state.app.error)\r\n    const status = useSelector<AppStateType, AppStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Length password should be 8 symbols';\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required';\r\n            } else if (values.confirmPassword.length < 8) {\r\n                errors.confirmPassword = 'Length password should be 8 symbols';\r\n            } else if (values.password !== values.confirmPassword) {\r\n                dispatch(setAppError({error:'Please make sure you passwords match'}));\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n\r\n            dispatch(setNewUserTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (status === 'succeeded') {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={s.signUp}>\r\n            {status === 'loading' && <Preloader/>}\r\n            <Title/>\r\n            {/* <h2 className={s.title}>It-incubator</h2> */}\r\n            <h3 className={s.subtitle}>Sign Up</h3>\r\n            <form className={s.FormBox} onSubmit={formik.handleSubmit}>\r\n                <div className={s.registrWrap}>\r\n                    <label className={s.label}>Email</label>\r\n                    <input className={s.field}\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                        placeholder=\"j&johnson@gmail.com\r\n                        \"\r\n                        onBlur={formik.handleBlur}\r\n                    />\r\n                </div>\r\n\r\n                {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                <div className={s.registrWrap}>\r\n                    <label className={s.label}>Password</label>\r\n                    <div className={s.inputWrap}>\r\n                        <input className={s.field}\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.password}\r\n                        placeholder=\"*********\"\r\n                        onBlur={formik.handleBlur}\r\n                    />\r\n                    </div>\r\n                </div>\r\n\r\n                {formik.touched.password && formik.errors.password &&\r\n                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                <div className={s.registrWrap}>\r\n                    <label className={s.label}>Confirm password</label>\r\n                    <div className={s.inputWrap}>\r\n                        <input className={s.field}\r\n                        id=\"confirmPassword\"\r\n                        name=\"confirmPassword\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.confirmPassword}\r\n                        placeholder=\"*********\"\r\n                        onBlur={formik.handleBlur}\r\n                    />\r\n                    </div>\r\n                </div>\r\n{/* \r\n                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>} */}\r\n        \r\n            <div className={s.btnWrap}>\r\n                <button className={s.btnLeft} type=\"button\" onClick={formik.handleReset}>Cancel</button>\r\n                <button className={s.btnRight} type=\"submit\" disabled={status === 'loading'}>Sign Up</button>\r\n            \r\n            {/* {error !== null && <div style={{color: 'red'}}>{error}</div>} */}\r\n           \r\n            </div>\r\n            {error !== null && <AppError error={error}/>}\r\n        </form>\r\n    </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SignUp","import React from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport {IUser, logoutTC} from \"../../redux/authReducer\";\r\nimport {AppStatusType} from \"../../redux/app-reducer\";\r\n\r\n\r\n\r\nfunction Profile() {\r\n\r\n    const user = useSelector<AppStateType, IUser | null>(state => state.auth.user)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const status = useSelector<AppStateType, AppStatusType>(state=>state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div>\r\n            {/*{loading && <Preloader/>}*/}\r\n            {status === 'loading' && <Preloader/>}\r\n            <div>\r\n                {\r\n                    user !== null ? <div>\r\n                        <img src={user.avatar} style={{width:'250px', height:'250px'}} alt='avatar'/>\r\n                        <p/>\r\n                        Name: {user.name}\r\n                        <p/>\r\n                        E-Mail: {user.email}\r\n                        <p/>\r\n                    </div> : 'No data'\r\n                }\r\n            </div>\r\n            <button onClick={logout} disabled={!isLoggedIn}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Error404.module.css'\r\nimport {PATH} from \"./Routes\";\r\n\r\n\r\nfunction Error404() {\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div className={s.notfound}>\r\n\r\n                <div className={s.notfound404}>\r\n                    <h1>404</h1>\r\n                </div>\r\n                <h2>Oops! This Page Could Not Be Found</h2>\r\n                <p>Sorry but the page you are looking for does not exist, have been removed. name changed or is\r\n                    temporarily unavailable</p>\r\n\r\n                <NavLink className={s.navLink} to={PATH.PROFILE}>Go To Homepage</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404\r\n","import s from \"./ForgotPassword.module.css\"\r\nimport React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport {Alert, CircularProgress, Snackbar} from \"@mui/material\";\r\nimport {passwordRecovery, RequestStatusType} from \"../../redux/authReducer\";\r\n\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nfunction ForgotPassword() {\r\n    const messageForEmail = `<div style={{'backgroundColor': 'lime', 'padding': '15px'}}>Password recovery link:<a href='http://localhost:3000/friday-project#/set-new-password/$token$'> link</a></div>`\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const appStatus = useSelector<AppStateType, RequestStatusType>(state => state.app.status);\r\n    const appError = useSelector<AppStateType, string>(state => state.app.error);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(passwordRecovery(values.email, messageForEmail))\r\n        },\r\n    })\r\n\r\n\r\n    if (appStatus === 'succeeded') {\r\n        return <Redirect to={PATH.CHECK_EMAIL}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.forgotPassword}>\r\n             <Title/>\r\n            {/* <h2 className={s.title}>It-incubator</h2> */}\r\n            <h3 className={s.subtitle}>Forgot your password?</h3>\r\n            {appStatus === 'loading' && <CircularProgress />}\r\n\r\n                <form className={s.formBox} onSubmit={formik.handleSubmit}>\r\n                    <div className={s.inputWrap}>\r\n                        <input className={s.field}\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            disabled={appStatus === 'loading'}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                            placeholder=\"Email\"\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                    </div>\r\n\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                    {appError && <div style={{color: 'red'}}>{appError}</div>}\r\n\r\n                    <p className={s.textLight}>\r\n                        Enter your email address and we will send you further instructions\r\n                    </p>\r\n                    <button className={s.btnBlue} type=\"submit\" disabled={appStatus === 'loading'}>Send Instructions</button>\r\n                </form>\r\n\r\n                <div className={s.boxLink}>\r\n                {/* <NavLink className={s.btnBlue} to={PATH.CHECK_EMAIL}>Send Instructions</NavLink> */}\r\n\r\n                    <p className={s.textLight}>\r\n                        Did you remember your password?\r\n                    </p>\r\n\r\n                    <NavLink className={s.linkBlue} to={PATH.LOGIN}>Try logging in</NavLink>\r\n                </div>\r\n\r\n            <Snackbar open={!!appError.length} autoHideDuration={3000}\r\n                      style={{position: 'absolute', bottom: 10, left: 10}}>\r\n                <Alert severity=\"error\">\r\n                    {appError}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n","import s from \"./NewPassword.module.css\"\r\nimport React from 'react'\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\n\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport {inputNewPassword,RequestStatusType} from \"../../redux/authReducer\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nfunction NewPassword() {\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const dispatch = useDispatch();\r\n    const appStatus = useSelector<AppStateType, RequestStatusType>(state => state.app.status);\r\n    const appError = useSelector<AppStateType, string>(state => state.app.error);\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.password.length < 3) {\r\n                errors.password = 'Min length 7 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(inputNewPassword(values.password, token))\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.newPassword}>\r\n            <Title/>\r\n            \r\n            {/* <h2 className={s.title}>It-incubator</h2> */}\r\n            <h3 className={s.subtitle}>Create new password</h3>\r\n\r\n            {appStatus === 'loading' && <p style={{color: \"green\", margin: 0}}>Loading...</p>}\r\n\r\n            <form className={s.FormBox} onSubmit={formik.handleSubmit}>\r\n                <div className={s.inputWrap}>\r\n                    <input className={s.field}\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        autoComplete='off'\r\n                        disabled={appStatus === 'loading'}\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.password}\r\n                        placeholder=\"Password\"\r\n                        onBlur={formik.handleBlur}\r\n                    />\r\n                </div>\r\n\r\n                {formik.touched.password && formik.errors.password &&\r\n                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                {appError && <div style={{color: 'red'}}>{appError}</div>}\r\n               \r\n\r\n                <p className={s.textLight}>Create new password and we will send you further instructions to email</p>\r\n\r\n                <button className={s.btnBlue} type=\"submit\" disabled={appStatus === 'loading'}>Create new password</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPassword","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (onChangeChecked) {\r\n            onChangeChecked(e.currentTarget.checked)\r\n        }\r\n\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label >\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n\r\n    return (\r\n        <div className={s.inputWrap}>\r\n            <label htmlFor=\"name\">\r\n            <input\r\n                type={'text'}\r\n                autoComplete='off'\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                name=\"name\"\r\n                id='name'\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n                {<span className={ restProps.value === '' ? s.placeHolder: s.hidePlaceHolder }>Type here</span>}\r\n            <span>test n ew branch</span>\r\n            </label>\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import * as React from 'react';\r\nimport {styled} from '@mui/material/styles';\r\nimport Rating from '@mui/material/Rating';\r\nimport StarIcon from '@mui/icons-material/Star';\r\n\r\n\r\nconst StyledRating = styled(Rating)({\r\n    '& .MuiRating-icon': {\r\n        marginRight: '3px',\r\n        fontSize: '12px',\r\n    },\r\n\r\n    '& .MuiRating-iconFilled': {\r\n        color: '#21268F',\r\n    },\r\n    '& .MuiRating-iconHover': {\r\n        color: '#21268F',\r\n    },\r\n\r\n});\r\n\r\ntype MainRatingPropsType = {\r\n    rating: number\r\n}\r\n\r\nexport default function MainRating(props: MainRatingPropsType) {\r\n\r\n    return (\r\n        <StyledRating\r\n            precision={0.2}\r\n            emptyIcon={<StarIcon style={{color: '#D7D8EF', fontSize: '12px'}}/>}\r\n            name=\"customized-6\"\r\n            defaultValue={props.rating}\r\n            max={5}/>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport SuperButton from \"../components/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"../components/c1-SuperInputText/SuperInputText\";\r\nimport { AppError } from '../components/common/appError/AppError';\r\nimport MainRating from './CardsList/Rating/Rating';\r\n\r\n\r\n\r\nfunction Test() {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Test Page</h1>\r\n            <SuperInputText/>\r\n            <SuperButton>Test</SuperButton>\r\n            <SuperCheckbox/>\r\n            <AppError error={'Error123'}/>\r\n            <MainRating/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test","import s from \"./Login.module.css\"\r\nimport React from 'react'\r\nimport { Form, FormikProps} from \"formik\";\r\nimport {NavLink} from 'react-router-dom'\r\nimport {PATH} from \"../Routes\";\r\nimport Title from \"../../components/common/Title/Title\";\r\nimport {AppError} from \"../../components/common/appError/AppError\";\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    IconButton,\r\n    Input,\r\n    InputAdornment,\r\n    InputLabel,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport s1 from './../../components/common/InputMail/InputMail.module.css'\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\ntype LoginPropsType = FormikProps<any> & {\r\n    error: string | null,\r\n}\r\n\r\n\r\nexport const Login: React.FC<LoginPropsType> =\r\n    ({handleSubmit, getFieldProps, error}) => {\r\n\r\n        const appStatus = useSelector((state: AppStateType) => state.app.status)\r\n\r\n        const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n\r\n        const handleClickShowPassword = () => {\r\n            setShowPassword(!showPassword);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <div className={s.login}>\r\n                    <Title/>\r\n                    <h3 className={s.subtitle}>Sign In</h3>\r\n                    <Form className={s.formBox} onSubmit={handleSubmit}>\r\n                        <div className={s.registrWrap}>\r\n                            <TextField id=\"email\"\r\n                                    label=\"Email\"\r\n                                    type='email'\r\n                                    variant=\"standard\"\r\n                                    className={s1.input}\r\n                                    {...getFieldProps('email')}   />\r\n                        </div>\r\n                        <p/>\r\n                        <div className={s.registrWrap}>\r\n                            <FormControl variant=\"standard\">\r\n                                {/* <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel> */}\r\n                                <Input\r\n                                    id=\"standard-adornment-password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    className={s1.input}\r\n                                    {...getFieldProps('password')}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}>\r\n                                                {showPassword ? <VisibilityOff/> : <Visibility/>}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n\r\n                        </div>\r\n                        <FormControlLabel id=\"rememberMe\" control={<Checkbox {...getFieldProps('rememberMe')}  />}\r\n                                          label=\"Remember me\"/>\r\n                        <p/>\r\n                        <NavLink className={s.linkTransparent} to={PATH.FORGOT_PASSWORD}>\r\n                            Forgot Password\r\n                        </NavLink>\r\n                        <button className={s.btnBlue} type={'submit'} disabled={appStatus === \"loading\"}>Login</button>\r\n\r\n                        <div className={s.linkWrap}>\r\n                            <p className={s.textLight}>\r\n                                Don’t have an account?\r\n                            </p>\r\n                            <NavLink className={s.linkBlue} to={PATH.SIGN_UP}>\r\n                                Sign up\r\n                            </NavLink>\r\n                        </div>\r\n                    </Form>\r\n                    {error !== null && <AppError error={error}/>}\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\nexport default Login","import React from 'react'\r\nimport {Formik} from \"formik\";\r\nimport Login from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\r\nimport {AuthStateType, loginTC} from \"../../redux/authReducer\";\r\nimport {AppStatusType} from \"../../redux/app-reducer\";\r\n\r\n\r\ntype ErrorsType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\n\r\n\r\nfunction LoginContainer() {\r\n    const {isLoggedIn} = useSelector<AppStateType, AuthStateType>(state => state.auth)\r\n    const status = useSelector<AppStateType, AppStatusType>(state=>state.app.status)\r\n    const error = useSelector<AppStateType, string>(state=>state.app.error)\r\n    const dispatch = useDispatch();\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n    return (\r\n        <>\r\n            {status === 'loading' && <Preloader/>}\r\n\r\n            <Formik\r\n                initialValues={{email: 'darya.gameza1@gmail.com', password: 'gameza1986', rememberMe: false}}\r\n                validate={values => {\r\n                    const errors: ErrorsType = {};\r\n\r\n                    if (!values.email) {\r\n                        errors.email = 'This field is required!';\r\n                    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n                        errors.email = 'Invalid email format';\r\n                    }\r\n\r\n                    if (!values.password) {\r\n                        errors.password = 'This field is required!';\r\n                    } else if (values.password.length < 8) {\r\n                        errors.password = 'Password must be more than 7 characters';\r\n                    }\r\n\r\n                    return errors;\r\n                }}\r\n                onSubmit={ ({email, password, rememberMe}) => {\r\n                  dispatch( loginTC(email, password, rememberMe))\r\n                    console.log(email, password, rememberMe)\r\n                }}\r\n            >\r\n                {\r\n                    (props) => (\r\n                        <Login {...props} error={error}/>\r\n                    )\r\n                }\r\n\r\n            </Formik>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginContainer","import React from 'react';\r\nimport LoginContainer from \"./LoginContainer\";\r\n\r\n\r\nexport const LoginPage = () => {\r\n    return (\r\n        <>\r\n            <LoginContainer />\r\n        </>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/letter.005fbbd1.svg\";","import s from \"./CheckEmail.module.css\"\r\nimport React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport letterImg from '../../assets/images/letter.svg';\r\nimport Title from \"../../components/common/Title/Title\";\r\n\r\n\r\n\r\nfunction CheckEmail() {\r\n\r\n    const email = useSelector<AppStateType, string>(state => state.auth.email)\r\n\r\n    return (\r\n        <div className={s.checkEmail}>\r\n            <Title/>           \r\n            <img className={s.letterImg} src={letterImg} alt=\"latter\" />           \r\n            <h3 className={s.subtitle}>Check Email</h3>\r\n            <p className={s.textLight}>We've sent an Email with instructions to {email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckEmail\r\n","import {instance} from \"./instanceAPI\";\r\n\r\nexport type QueryRequestType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string | null\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string | null\r\n    name?: string\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(data: QueryRequestType) {\r\n        return instance.get(`cards/pack`, {params: data})\r\n    },\r\n    postPack(cardsPack: PostPacksBodyType) {\r\n        return instance.post(`cards/pack`,  {cardsPack})\r\n    },\r\n    deletePack(idPack: string) {\r\n        return instance.delete(`cards/pack?id=${idPack}`)\r\n    },\r\n    editPack(cardsPack: EditPackBodyType) {\r\n        return instance.put('cards/pack', {cardsPack})\r\n    }\r\n}\r\n\r\ntype PostPacksBodyType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type EditPackBodyType = {\r\n    _id: string\r\n    name?: string\r\n}","import {instance} from \"./instanceAPI\";\r\nimport {NewCardType} from \"../redux/cardPacksReducer\";\r\n\r\n\r\nexport type CardsQueryRequestType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string | null\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type EditCardBodyType = {\r\n    _id: string\r\n    question?: string\r\n}\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(data: CardsQueryRequestType) {\r\n        return instance.get(`cards/card`, {params: data})\r\n    },\r\n    postCards(data: NewCardType) {\r\n        return instance.post(`cards/card`,  {card: data})\r\n    },\r\n    deleteCards(idCard: string) {\r\n        return instance.delete(`cards/card?id=${idCard}`)\r\n    },\r\n    editCard(card: EditCardBodyType) {\r\n        return instance.put('cards/card', {card})\r\n    },\r\n    putGradeCard(grade: number, card_id: string) {\r\n        return instance.put('cards/grade', {grade, card_id})\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {AppStateType} from './store';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\nimport errorResponseHandler from '../utils/errorResponseHandler';\r\nimport {EditPackBodyType, packsAPI} from \"../api/packs-api\";\r\nimport {cardsAPI, CardsQueryRequestType, EditCardBodyType} from \"../api/cards-api\";\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n}\r\ntype CardPacksType = {\r\n    cardPacks: PackType[]\r\n    page: number\r\n    pageCount: number,\r\n    cardPacksTotalCount: number,\r\n    minCardsCount: number,\r\n    min: number,\r\n    maxCardsCount: number,\r\n    max: number,\r\n    packName: string,\r\n    sortPacks: string | null\r\n}\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    answerImg: null | string\r\n    answerVideo: null | string\r\n    cardsPack_id: string\r\n    comments: null | string\r\n    created: string\r\n    grade: number\r\n    question: string\r\n    questionImg: null | string\r\n    questionVideo: null | string\r\n    shots: number\r\n    updated: string\r\n    user_id: string\r\n    _id: string\r\n    rating: number //added\r\n}\r\ntype CardsType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    sortCards: string | null\r\n    cardName: string\r\n}\r\n\r\ntype NewCardsPackType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number | null\r\n    shots?: number | null\r\n    rating?: number | null\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\nexport type NewCardType = {\r\n    cardsPack_id: string\r\n    question: string\r\n    answer: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    currentCardPacks: CardPacksType\r\n    currentCards: CardsType\r\n    currentPackName: string,\r\n    currentCardsPackId: string\r\n    user_id: null | string\r\n    newCardsPack: NewCardsPackType\r\n    newCard: NewCardType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    currentCardPacks: {\r\n        cardPacks: [],\r\n        page: 1,\r\n        pageCount: 10,\r\n        cardPacksTotalCount: 0,\r\n        minCardsCount: 0,\r\n        min: 0,\r\n        maxCardsCount: 103,\r\n        max: 103,\r\n        packName: '',\r\n        sortPacks: null,\r\n    },\r\n    currentCards: {\r\n        cards: [],\r\n        cardsTotalCount: 0,\r\n        maxGrade: 0,\r\n        minGrade: 0,\r\n        packUserId: '',\r\n        page: 1,\r\n        pageCount: 5,\r\n        sortCards: null,\r\n        cardName:''\r\n    },\r\n    currentPackName: '',\r\n    currentCardsPackId: '',\r\n    user_id: null,\r\n    newCardsPack: {\r\n        name: '',\r\n        path: '',\r\n        grade: null,\r\n        shots: null,\r\n        rating: null,\r\n        deckCover: '',\r\n        private: false,\r\n        type: '',\r\n    },\r\n    newCard:{\r\n        cardsPack_id: '',\r\n        question: 'test question',\r\n        answer: 'test answer',\r\n        grade: 0,\r\n        shots: 0,\r\n        rating: 0,\r\n        answerImg: '',\r\n        questionImg: '',\r\n        questionVideo: '',\r\n        answerVideo: '',\r\n        type: ''\r\n    }\r\n}\r\n\r\nexport const cardPacksReducer = (state: InitialStateType = initialState, action: CardPacksActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARD-PACKS':\r\n            return {...state, currentCardPacks: {...state.currentCardPacks, ...action.payload.cardPacks}};\r\n        case 'SET-MIN-MAX-CARDS-COUNT':\r\n            return {\r\n                ...state,\r\n                currentCardPacks: {\r\n                    ...state.currentCardPacks,\r\n                    min: action.payload.range[0],\r\n                    max: action.payload.range[1]\r\n                }\r\n            };\r\n        case 'SET-PACKS-PAGE':\r\n            return {\r\n                ...state,\r\n                currentCardPacks: {...state.currentCardPacks, page: action.payload.page}\r\n            };\r\n        case 'SET-PACKS-PAGE-COUNT':\r\n            return {\r\n                ...state,\r\n                currentCardPacks: {\r\n                    ...state.currentCardPacks,\r\n                    pageCount: action.payload.pageCount\r\n                }\r\n            };\r\n        case 'SET-SEARCH-PACKS-NAME':\r\n            return {\r\n                ...state,\r\n                currentCardPacks: {\r\n                    ...state.currentCardPacks,\r\n                    packName: action.payload.packName\r\n                }\r\n            };\r\n        case 'SET-SORT-PACKS':\r\n            return {\r\n                ...state,\r\n                currentCardPacks: {\r\n                    ...state.currentCardPacks,\r\n                    ...action.payload,\r\n                }\r\n            }\r\n        case 'SET-CURRENT-PACK-NAME':\r\n            return {...state, currentPackName: action.payload.currentPackName}\r\n\r\n        case 'SET-CARDS':\r\n            return {\r\n                ...state,\r\n                currentCards: {...state.currentCards, ...action.payload.cards}\r\n            };\r\n        case 'RESET-CARDS':\r\n            return {...state, currentCards: {...initialState.currentCards, cards: []}}\r\n        case 'SET-CARDS-PAGE':\r\n            return {\r\n                ...state,\r\n                currentCards: {...state.currentCards, page: action.payload.page}\r\n            };\r\n        case 'SET-CARDS-PAGE-COUNT':\r\n            return {\r\n                ...state,\r\n                currentCards: {...state.currentCards, pageCount: action.payload.pageCount}\r\n            };\r\n\r\n        case 'SET-CURRENT-CARDS-PACK-ID':\r\n            return {...state, currentCardsPackId: action.payload.currentCardsPackId};\r\n        case \"SET-CURRENT-CARD-NAME\":\r\n            return {...state, currentCards: {...state.currentCards, cardName: action.payload.currentCardName}}\r\n        case 'SET-USER-ID':\r\n            return {...state, user_id: action.payload.user_id}\r\n\r\n        case 'ADD-NEW-CARDS-PACK':\r\n            return {...state, newCardsPack: {...action.payload.cardsPack}}\r\n\r\n        case \"CHANGE-GRADE-CARD\":\r\n            return {\r\n                ...state,\r\n                currentCards: {\r\n                    ...state.currentCards,\r\n                    cards: state.currentCards.cards.map(card => (\r\n                        card._id === action.card_id ? {\r\n                            ...card,\r\n                            grade: action.grade\r\n                        } : card\r\n                    ))\r\n                }\r\n            }\r\n\r\n        case \"SET-FILTER-CARDS\":\r\n            return {\r\n                ...state,\r\n                currentCards: {\r\n                    ...state.currentCards,\r\n                    ...action.payload,\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setCardPacks = (cardPacks: CardPacksType) => ({\r\n    type: 'SET-CARD-PACKS',\r\n    payload: {cardPacks}\r\n} as const)\r\nexport const setSearchPacksName = (payload: { packName: string }) => ({\r\n    type: 'SET-SEARCH-PACKS-NAME',\r\n    payload\r\n} as const)\r\nexport const setSortPacks = (sortPacks: string | null) => ({\r\n    type: 'SET-SORT-PACKS',\r\n    payload: {sortPacks}\r\n} as const)\r\nexport const setCurrentPackName = (payload: { currentPackName: string }) => ({\r\n    type: 'SET-CURRENT-PACK-NAME',\r\n    payload\r\n} as const)\r\nexport const setMinMaxCardsCount = (payload: { range: number[] }) => ({\r\n    type: 'SET-MIN-MAX-CARDS-COUNT',\r\n    payload\r\n} as const)\r\nexport const setPacksPage = (payload: { page: number }) => ({\r\n    type: 'SET-PACKS-PAGE',\r\n    payload\r\n} as const)\r\nexport const setPacksPageCount = (payload: { pageCount: number }) => ({\r\n    type: 'SET-PACKS-PAGE-COUNT',\r\n    payload\r\n} as const)\r\n\r\nexport const setCards = (cards: CardsType) => ({type: 'SET-CARDS', payload: {cards}} as const)\r\nexport const resetCards = () => ({type: 'RESET-CARDS'} as const)\r\nexport const setCardsPage = (payload: { page: number }) => ({type: 'SET-CARDS-PAGE', payload} as const)\r\nexport const setCardsPageCount = (payload: { pageCount: number }) => ({type: 'SET-CARDS-PAGE-COUNT', payload} as const)\r\nexport const setCurrentCardsPackID = (payload: { currentCardsPackId: string }) => ({\r\n    type: 'SET-CURRENT-CARDS-PACK-ID',\r\n    payload\r\n} as const)\r\nexport const setSearchCardName = (payload: { currentCardName: string }) => ({\r\n    type: 'SET-CURRENT-CARD-NAME',\r\n    payload\r\n} as const)\r\nexport const changeGradeCard = (grade: number, card_id: string) => ({\r\n    type: 'CHANGE-GRADE-CARD',\r\n    grade,\r\n    card_id,\r\n} as const)\r\nexport const setSortCards = (sortCards: string | null) => ({\r\n    type: 'SET-FILTER-CARDS',\r\n    payload: {sortCards}\r\n} as const)\r\n\r\nexport const setUserId = (payload: { user_id: string }) => ({\r\n    type: 'SET-USER-ID',\r\n    payload\r\n} as const)\r\n\r\nexport const addNewCardsPack = (payload: { cardsPack: NewCardsPackType }) => ({\r\n    type: 'ADD-NEW-CARDS-PACK',\r\n    payload\r\n} as const)\r\nexport const addNewCard = (payload: { card: NewCardType }) => ({\r\n    type: 'ADD-NEW-CARD',\r\n    payload\r\n} as const)\r\n\r\n\r\ntype CardPacksActionsTypes = | ReturnType<typeof setCardPacks>\r\n    | ReturnType<typeof setMinMaxCardsCount>\r\n    | ReturnType<typeof setPacksPage>\r\n    | ReturnType<typeof setPacksPageCount>\r\n    | ReturnType<typeof setSearchPacksName>\r\n    | ReturnType<typeof setSortPacks>\r\n    | ReturnType<typeof addNewCardsPack>\r\n    | ReturnType<typeof setCurrentPackName>\r\n\r\ntype CardsActionsTypes = | ReturnType<typeof setCards>\r\n    | ReturnType<typeof setCardsPage>\r\n    | ReturnType<typeof setCardsPageCount>\r\n    | ReturnType<typeof resetCards>\r\n    | ReturnType<typeof addNewCard>\r\n    | ReturnType<typeof setSearchCardName>\r\n\r\n\r\nexport type CardPacksActionsType =\r\n    CardPacksActionsTypes\r\n    | CardsActionsTypes\r\n    | ReturnType<typeof setUserId>\r\n    | ReturnType<typeof setCurrentCardsPackID>\r\n    | ReturnType<typeof changeGradeCard>\r\n    | ReturnType<typeof setSortCards>\r\n\r\nexport const requestCardPack = () => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    const {cardPacks, ...requestData} = getState().cardPacks.currentCardPacks\r\n    const user_id = getState().cardPacks.user_id\r\n\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        let response = await packsAPI.getPacks({...requestData, user_id});\r\n        dispatch(setAppError({error: ''}))\r\n        dispatch(setCardPacks(response.data));\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n//todo type\r\nexport const addNewPack = (newPackName: string) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await packsAPI.postPack({name: newPackName})\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCardPack())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\n//todo type\r\nexport const fetchDeletePack = (idPack: string) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await packsAPI.deletePack(idPack)\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCardPack())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\n//todo type\r\nexport const fetchEditPack = (cardsPack: EditPackBodyType) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await packsAPI.editPack(cardsPack)\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCardPack())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\n\r\n//----------------------------cards----------------------------\r\n\r\nexport const requestCards = (data?: CardsQueryRequestType) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    const page = getState().cardPacks.currentCards.page\r\n    const pageCount = getState().cardPacks.currentCards.pageCount\r\n    const currentCardsPackId = getState().cardPacks.currentCardsPackId\r\n    const sortCards = getState().cardPacks.currentCards.sortCards\r\n    const cardName = getState().cardPacks.currentCards.cardName\r\n\r\n    try {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        let response = await cardsAPI.getCards({\r\n            page,\r\n            pageCount,\r\n            cardsPack_id: currentCardsPackId,\r\n            sortCards,\r\n            cardQuestion: cardName,\r\n            ...data\r\n        })\r\n        dispatch(setCards(response.data))\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        dispatch(setAppError({error: ''}))\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const addNewCards = (cardName: string) => async (dispatch: Dispatch<any>, getState: () => AppStateType) => {\r\n    const grade = getState().cardPacks.newCard.grade\r\n    // const question = getState().cardPacks.newCard.question\r\n    const answer = getState().cardPacks.newCard.answer\r\n    const idCurrentCardsPack = getState().cardPacks.currentCardsPackId\r\n\r\n\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await cardsAPI.postCards({cardsPack_id: idCurrentCardsPack, answer:answer, question: cardName, grade:grade})\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCards())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const fetchDeleteCard = (idCard: string) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await cardsAPI.deleteCards(idCard)\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCards())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const fetchEditCard = (cardsPack: EditCardBodyType) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        await cardsAPI.editCard(cardsPack)\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(requestCards())\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}\r\n\r\n//added\r\nexport const fetchUpdateCard = (grade: number, card_id: string) => async (dispatch: Dispatch<any>) => {\r\n    try {\r\n        dispatch(setAppStatus({status: \"loading\"}))\r\n        let response =  await cardsAPI.putGradeCard(grade, card_id)\r\n        dispatch(setAppStatus({status: \"succeeded\"}))\r\n        dispatch(changeGradeCard(response.data.updatedGrade.grade, response.data.updatedGrade.card_id))\r\n    } catch (e) {\r\n        errorResponseHandler(e, dispatch)\r\n    }\r\n}","export const formattingDate = (date: string) => {\r\n    const dateObj = new Date(date);\r\n    const day = dateObj.getDate();\r\n    const month = dateObj.getMonth() + 1;\r\n    const formattedDay = day < 10 ? `0${day}` : day;\r\n    const formattedMonth = month < 10 ? `0${month}` : month;\r\n    return `${formattedDay}.${formattedMonth}.${dateObj.getFullYear()}`;\r\n}","import s from \"./BtnActions.module.css\"\r\n\r\ntype BtnActionsPropsType = {\r\n    onClick: () => void\r\n    style: any\r\n    name: string\r\n    key?: string\r\n}\r\nexport default function BtnActions(props: BtnActionsPropsType) {\r\n\r\n    return (\r\n        <button className={s.btn} style={props.style} key={props.key} onClick={props.onClick}>{props.name}</button>\r\n    );\r\n}","import React from 'react'\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchDeleteCard, fetchDeletePack} from \"../../redux/cardPacksReducer\";\r\nimport BtnActions from \"./BtnActions/BtnActions\";\r\n\r\ntype AlertDialogForDeletePackPropsType = {\r\n    packName: string\r\n    open: boolean\r\n    setOpenAlertDialogForDeletePack: (newStateValue: boolean) => void\r\n    packId: string\r\n    alertTitle: string\r\n    type: 'pack' | 'card'\r\n}\r\n\r\nfunction AlertDialogForDeleteValue(props: AlertDialogForDeletePackPropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleOpen = () => {\r\n        props.setOpenAlertDialogForDeletePack(true)\r\n\r\n    }\r\n    const handleClose = () => {\r\n        props.setOpenAlertDialogForDeletePack(false)\r\n    }\r\n\r\n    const removePackHandler = () => {\r\n        if (props.type === 'pack') {\r\n            dispatch(fetchDeletePack(props.packId))\r\n            props.setOpenAlertDialogForDeletePack(false)\r\n        } else {\r\n            dispatch(fetchDeleteCard(props.packId))\r\n            props.setOpenAlertDialogForDeletePack(false)\r\n        }\r\n    }\r\n\r\n\r\n    const styleBtnDelete: any = {\r\n        color: '#FFFFFF',\r\n        background: '#F1453D',\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <BtnActions name='Delete'  onClick={handleOpen} style={styleBtnDelete}/>\r\n            <Dialog\r\n                open={props.open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {props.alertTitle}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {props.type === 'pack'\r\n                            ? <span>Do you really want to remove <strong>Pack - {props.packName}</strong>?\r\n                            All cards will be excluded from this course\r\n                        </span>\r\n                            : <span>\r\n                                Do you really want to remove - <strong>Card - {props.packName}</strong>?\r\n                            </span>}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button color={\"error\"} onClick={removePackHandler} autoFocus>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertDialogForDeleteValue","import React, {useState} from 'react'\r\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addNewCards, addNewPack, fetchEditCard, fetchEditPack} from \"../../redux/cardPacksReducer\";\r\nimport BtnActions from \"./BtnActions/BtnActions\";\r\n\r\ntype AlertDialogForDeletePackPropsType = {\r\n    packName: string\r\n    open: boolean\r\n    setOpenAlertDialogForEditPack: (newStateValue: boolean) => void\r\n    packId: string\r\n    alertTitle: string\r\n    inputLabel: string\r\n    type: 'pack' | 'card'\r\n}\r\n\r\nfunction AlertDialogForEditValue(props: AlertDialogForDeletePackPropsType) {\r\n\r\n    const [newName, setNewName] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const packNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n\r\n    const handleOpen = ( ) => {\r\n        props.setOpenAlertDialogForEditPack(true)\r\n\r\n    }\r\n    const handleClose = () => {\r\n        props.setOpenAlertDialogForEditPack(false)\r\n    }\r\n    const editNewPackName = () => {\r\n        if(props.type === 'pack'){\r\n            dispatch(fetchEditPack({_id: props.packId, name: newName}))\r\n            props.setOpenAlertDialogForEditPack(false)\r\n        } else {\r\n            dispatch(fetchEditCard({_id: props.packId, question:newName}))\r\n            props.setOpenAlertDialogForEditPack(false)\r\n        }\r\n    }\r\n\r\n    const styleBtnEdit: any = {    \r\n        color: '#21268F',\r\n        background: '#D7D8EF',        \r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <BtnActions name='Edit' onClick={handleOpen} style={styleBtnEdit}/>\r\n            <Dialog\r\n                open={props.open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {props.alertTitle}\r\n                </DialogTitle>\r\n                <DialogContent style={{width:'500px'}}>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <TextField id=\"outlined-basic\" onChange={packNameHandler} fullWidth label={props.inputLabel} variant=\"standard\" />\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button color={\"error\"} onClick={handleClose}>Cancel</Button>\r\n                    <Button  onClick={editNewPackName} autoFocus>\r\n                        Edit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertDialogForEditValue","import React, {useState} from 'react'\r\nimport s from \"./PacksList.module.css\"\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addNewCards, addNewPack} from \"../../redux/cardPacksReducer\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\n\r\ntype AlertDialogForDeletePackPropsType = {\r\n    open: boolean\r\n    setOpenAlertDialogForNewPack: (newStateValue: boolean) => void\r\n    alertTitle: string\r\n    buttonName: string\r\n    inputLabel: string\r\n    type: 'pack' | 'card'\r\n}\r\n\r\nfunction AlertDialogForNewValue(props: AlertDialogForDeletePackPropsType) {\r\n\r\n\r\n    const [name, setName] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const packNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n\r\n    const handleOpen = ( ) => {\r\n        props.setOpenAlertDialogForNewPack(true)\r\n\r\n    }\r\n    const handleClose = () => {\r\n        props.setOpenAlertDialogForNewPack(false)\r\n    };\r\n    const editNewPackName = () => {\r\n        if(props.type === 'pack'){\r\n            dispatch(addNewPack(name))\r\n            props.setOpenAlertDialogForNewPack(false)\r\n        } else {\r\n            dispatch(addNewCards(name))\r\n            props.setOpenAlertDialogForNewPack(false)\r\n        }\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button className={s.btnBlue} onClick={handleOpen}>{props.buttonName}</button>\r\n            <Dialog\r\n                open={props.open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {props.alertTitle}\r\n                    <IconButton onClick={handleClose} style={{float:'right'}}>\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent style={{width:'500px'}}>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        <TextField id=\"outlined-basic\" onChange={packNameHandler} fullWidth label={props.inputLabel} variant=\"standard\" />\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button color={\"error\"} onClick={handleClose}>Cancel</Button>\r\n                    <Button  onClick={editNewPackName} autoFocus>\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlertDialogForNewValue","// import { style1Type } from \"../../../pages/PacksList/PacksList\";\r\nimport s from \"./BtnShowCards.module.css\"\r\n\r\ntype BtnShowCardsPropsType = {\r\n    onClick:() => void\r\n    style: any\r\n    name:string\r\n\r\n} \r\nexport default function BtnShowCards(props:BtnShowCardsPropsType) {\r\n\r\n\r\nreturn (\r\n    <div className={s.btnShowCards}>\r\n        <button className={s.btn} style={props.style} onClick={props.onClick}>{props.name}</button>    \r\n    </div>\r\n);\r\n}\r\n","import s from \"./Subtitle.module.css\"\r\n\r\n\r\nexport default function Subtitle(props) {\r\n  return (\r\n    <div className={s.subtitleWrap}>\r\n        <h3 className={s.subtitle}>{props.subtitle}</h3>    \r\n    </div>\r\n  );\r\n}\r\n","import s from \"./UsePagination.module.css\"\r\nimport * as React from 'react';\r\nimport usePagination from '@mui/material/usePagination';\r\nimport {styled} from '@mui/material/styles';\r\n\r\nconst List = styled('ul')({\r\n    listStyle: 'none',\r\n\r\n    margin: 0,\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n});\r\n\r\ntype UsePaginationPropsType = {\r\n    count: number\r\n    page: number\r\n    onChange: (value: any) => void\r\n}\r\n\r\nexport default function UsePagination(props: UsePaginationPropsType) {\r\n    const {items} = usePagination({\r\n        count: props.count,\r\n        page: props.page,\r\n        onChange: props.onChange,\r\n    });\r\n\r\n    return (\r\n        <div className={s.usePagination}>\r\n            <nav>\r\n                <List>\r\n                    {items.map(({page, type, selected, ...item}, index) => {\r\n                        let children = null;\r\n\r\n                        if (type === 'start-ellipsis' || type === 'end-ellipsis') {\r\n                            children = '…';\r\n                        } else if (type === 'page') {\r\n                            children = (\r\n                                <button\r\n                                    type=\"button\"\r\n                                    style={{\r\n                                        // fontWeight: selected ? 'bold' : undefined,\r\n                                        backgroundColor: selected ? '#21268F' : 'transparent',\r\n                                        color: selected ? '#F2F5F7' : '#2D2E46',\r\n                                        width: '24px',\r\n                                        height: '24px',\r\n                                        borderRadius: '3px',\r\n                                        border: 'none',\r\n                                        fontFamily: 'Lato',\r\n                                        fontSize: '12px',\r\n                                        lineHeight: '120%',\r\n                                        cursor: 'pointer',\r\n                                    }}\r\n                                    {...item}\r\n                                    onClick={() => {\r\n                                        props.onChange(page)\r\n                                        items[index].selected = true\r\n                                    }}\r\n                                >\r\n                                    {page}\r\n                                </button>\r\n                            );\r\n                        } else {\r\n                            children = (\r\n                                <button type=\"button\" {...item} onClick={() => {\r\n                                    props.onChange(page)\r\n                                    items[index].selected = true\r\n                                }}>\r\n                                    {type}\r\n                                </button>\r\n                            );\r\n                        }\r\n\r\n                        return <li\r\n                            style={{\r\n                                marginRight: '15px',\r\n\r\n                            }}\r\n                            key={index}>{children}</li>;\r\n                    })}\r\n                </List>\r\n            </nav>\r\n        </div>\r\n    );\r\n\r\n}","import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport InputBase from '@mui/material/InputBase';\r\n\r\n\r\nconst BootstrapInput = styled(InputBase)(({ theme }) => ({\r\n \r\n  '& .MuiInputBase-input': {\r\n    width: '39',\r\n    height: '24',\r\n    position: 'relative',\r\n    backgroundColor: ' #FFFFFF',\r\n    border: '1px solid #635D80', \r\n        // opacity: '0.4',\r\n    fontSize: '12',\r\n    textAlign: 'center', \r\n    padding: '4px 9px 5px 6px',\r\n    color: '#2D2E46',\r\n    \r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      'Lato',\r\n    \r\n    ].join(','),\r\n    '&:focus': {\r\n      borderRadius: 4,\r\n      borderColor: '#21268F',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n}));\r\n\r\ntype CustomizedSelectsPropsType = {\r\n  value: number\r\n  onChange: (e: any) => void\r\n}\r\n\r\n\r\nexport default function CustomizedSelects(props: CustomizedSelectsPropsType) {\r\n\r\n  const handleChange = (event: { target: { value: string } }) => {\r\n    props.onChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl sx={{ m: 1 }} variant=\"standard\">\r\n        <Select\r\n          value={props.value.toString()}\r\n          displayEmpty\r\n          id=\"demo-customized-select\"\r\n          onChange={handleChange}\r\n          input={<BootstrapInput />}\r\n        >\r\n          <MenuItem value={5}>5</MenuItem>\r\n          <MenuItem value={10}>10</MenuItem>\r\n          <MenuItem value={15}>15</MenuItem>\r\n          <MenuItem value={20}>20</MenuItem>\r\n          <MenuItem value={25}>25</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import s from \"./PacksList.module.css\"\r\nimport React, {CSSProperties, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    requestCardPack, setCurrentCardsPackID, setCurrentPackName, setMinMaxCardsCount,\r\n    setPacksPage,\r\n    setPacksPageCount, setSearchPacksName, setSortPacks, setUserId\r\n} from \"../../redux/cardPacksReducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {formattingDate} from \"../../utils/formattingDate\";\r\nimport {CircularProgress, createTheme, Slider, ThemeProvider} from \"@mui/material\";\r\nimport AlertDialogForDeleteValue from \"./AlertDialogForDeleteValue\";\r\nimport AlertDialogForEditValue from \"./AlertDialogForEditValue\";\r\nimport AlertDialogForNewValue from \"./AlertDialogForNewValue\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport BtnShowCards from \"../../components/common/btnShowCards/BtnShowCards\";\r\nimport Subtitle from \"../../components/common/subtitle/Subtitle\";\r\nimport {styled} from '@mui/material/styles';\r\nimport UsePagination from \"./Pagination/UsePagination\";\r\nimport SelectLabels from \"./Select/Select\";\r\nimport BtnActions from \"./BtnActions/BtnActions\";\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\r\n\r\n\r\nfunction PacksList() {\r\n\r\n    //state\r\n    const isLoggedIn = useSelector((state: AppStateType) => state.auth.isLoggedIn)\r\n    const dataPacksList = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.cardPacks);\r\n    const currentPage = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.page);\r\n    const idAuthorizedUser = useSelector<AppStateType, string>(state => state.auth.user?._id!);\r\n    const userIdForRequest = useSelector((state: AppStateType) => state.cardPacks.user_id)\r\n    const appStatus = useSelector((state: AppStateType) => state.app.status)\r\n    const min = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.min)\r\n    const max = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.max)\r\n    const packName = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.packName)\r\n    const page = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.page)\r\n    const pageCount = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.pageCount)\r\n    const totalCount = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.cardPacksTotalCount)\r\n    const sortPacks = useSelector((state: AppStateType) => state.cardPacks.currentCardPacks.sortPacks)\r\n\r\n    //dialog alerts\r\n    const [openAlertDialogForDeletePack, setOpenAlertDialogForDeletePack] = React.useState(false);\r\n    const [openAlertDialogForEditPack, setOpenAlertDialogForEditPack] = React.useState(false);\r\n    const [openAlertDialogForNewPack, setOpenAlertDialogForNewPack] = React.useState(false);\r\n\r\n    //local state for input / range\r\n    const [searchPackName, setSearchPackName] = React.useState('');\r\n    const [value, setValue] = React.useState<number[]>([min, max]);\r\n    const [sort, setSort] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n    let history = useHistory();\r\n\r\n\r\n    //for request cardPacks\r\n    useEffect(() => {\r\n        dispatch(requestCardPack())\r\n    }, [userIdForRequest, packName, min, max, page, pageCount, sortPacks])\r\n\r\n    //paginator\r\n    const onChangePage = (value: number) => {\r\n        dispatch(setPacksPage({page: value}))\r\n    }\r\n    const onChangePacksCountPerPage = (value: string) => {\r\n        dispatch(setPacksPageCount({pageCount: +value}))\r\n    }\r\n\r\n    //fetch all or you packs\r\n    const fetchMyPacksCards = () => {\r\n        dispatch(setUserId({user_id: idAuthorizedUser}))\r\n    }\r\n    const fetchAllPacksCards = () => {\r\n        dispatch(setUserId({user_id: ''}))\r\n    }\r\n\r\n    //for request cardPacks with name from input\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            dispatch(setSearchPacksName({packName: searchPackName}))\r\n        }, 1000)\r\n        return () => {\r\n            clearTimeout(handler);\r\n        }\r\n    }, [searchPackName])\r\n    const searchPackNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchPackName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    //for request cardPacks with range\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            dispatch(setMinMaxCardsCount({range: value}))\r\n        }, 1000)\r\n        return () => {\r\n            clearTimeout(handler);\r\n        }\r\n    }, [value])\r\n\r\n    const handleChangeRangeCardCount = (event: Event, newValue: number | number[], activeThumb: number ) => {\r\n        setValue(newValue as number[]);\r\n        \r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    const onClickShowCardsHandle = (id: string, name: string) => {\r\n        dispatch(setCurrentCardsPackID({currentCardsPackId: id}))\r\n        dispatch(setCurrentPackName({currentPackName: name}))\r\n        history.push(PATH.CARDS_LIST)\r\n    }\r\n\r\n    const onClickShowLearnPageHandle = (id: string, name: string) => {\r\n        dispatch(setCurrentCardsPackID({currentCardsPackId: id}))\r\n        dispatch(setCurrentPackName({currentPackName: name}))\r\n        history.push(PATH.LEARN_PAGE)\r\n    }\r\n\r\n    const toggleFilter = (type: string) => {\r\n        if (!sort) {\r\n            if (type === 'card') {\r\n                dispatch(setSortPacks('0cardsCount'))\r\n            } else {\r\n                dispatch(setSortPacks('0updated'))\r\n            }\r\n            setSort(!sort)\r\n        } else {\r\n            if (type === 'card') {\r\n                dispatch(setSortPacks('1cardsCount'))\r\n            } else {\r\n                dispatch(setSortPacks('1updated'))\r\n            }\r\n            setSort(!sort)\r\n        }\r\n    }\r\n\r\n\r\n    const style1: CSSProperties = {\r\n        color: '#2D2E46',\r\n        background: '#FFFFFF',\r\n    }\r\n    const style2: CSSProperties = {\r\n        color: '#FFFFFF',\r\n        background: '#9A91C8',\r\n    }\r\n    const styleBtnLearn: CSSProperties = {\r\n        color: '#21268F',\r\n        background: '#D7D8EF',\r\n    }\r\n\r\n    const theme = createTheme({\r\n        components: {\r\n            // Name of the component\r\n            MuiSlider: {\r\n                styleOverrides: {\r\n                    // Name of the slot\r\n                    root: {\r\n                        // Some CSS\r\n                        color: '#21268F',\r\n                        height: 5,\r\n                        '& .MuiSlider-track': {\r\n                            border: 'none',\r\n                        },\r\n                        '& .MuiSlider-thumb': {\r\n                            height: 16,\r\n                            width: 16,\r\n                            backgroundColor: '#fff',\r\n                            border: '5px solid currentColor',\r\n                            '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\r\n                                boxShadow: 'inherit',\r\n                                touchAction: 'pan-x',\r\n                            },\r\n                            '&:before': {\r\n                                display: 'none',\r\n                            },\r\n                        },\r\n                        '& .MuiSlider-valueLabel': {\r\n                            lineHeight: 1.2,\r\n                            fontSize: 12,\r\n                            background: 'unset',\r\n                            padding: 0,\r\n                            width: 32,\r\n                            height: 24,\r\n                            borderRadius: '3',\r\n                            backgroundColor: '#21268F',\r\n                            '&:before': {display: 'none'},\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={s.packsList}>\r\n            <div className={s.contentLeft}>\r\n                <h3 className={s.titleForButtons}>Show pack cards</h3>\r\n                <div className={s.btnWrap}>\r\n                    <BtnShowCards name='My' onClick={fetchMyPacksCards} style={ idAuthorizedUser === userIdForRequest ? style2 : style1}/>\r\n                    <BtnShowCards name='All' onClick={fetchAllPacksCards} style={idAuthorizedUser === userIdForRequest ? style1 : style2}/>\r\n                </div>\r\n                <h3 className={s.titleForSlider}>Number of cards</h3>\r\n                <div className={s.sliderWrap}>\r\n                    <ThemeProvider theme={theme}>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={handleChangeRangeCardCount}\r\n                        valueLabelDisplay=\"on\"\r\n                    />\r\n                    </ThemeProvider>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.contentRight}>\r\n                <Subtitle subtitle='Packs list'/>\r\n                <div className={s.contentRightTop}>\r\n                    <input className={s.search} type=\"text\" placeholder='Search...' value={searchPackName}\r\n                           onChange={searchPackNameHandler}/>\r\n                    <AlertDialogForNewValue open={openAlertDialogForNewPack}\r\n                                            setOpenAlertDialogForNewPack={setOpenAlertDialogForNewPack}\r\n                                            alertTitle={\"Add new pack?\"}\r\n                                            buttonName={\"Add new pack\"}\r\n                                            inputLabel={\"Name pack\"}\r\n                                            type={\"pack\"}/>\r\n                </div>\r\n\r\n                {appStatus === 'loading' ?\r\n                    <CircularProgress style={{position: 'absolute', right: '50%', top: '300px'}}/>\r\n                    : <>\r\n\r\n\r\n      <div className={s.tableWrap}>\r\n                        <table className={s.table}>\r\n                            <thead className={s.tableHeader}>\r\n                                <tr className={s.tr}>\r\n                                    <th className={s.th}>Name</th>\r\n                                    <th className={s.th} onClick={() => toggleFilter('card')}>Cards{sort ? <ArrowDropDownIcon/> : <ArrowDropUpIcon/>}</th>\r\n                                    <th className={s.th} onClick={() => toggleFilter('updated')}>Last updated{sort ? <ArrowDropDownIcon/> : <ArrowDropUpIcon/>}</th>\r\n                                    <th className={s.th}>Created by</th>\r\n                                    <th className={s.th}>Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                        <div className={s.scrollTableBody}>\r\n                            <tbody>\r\n                            {dataPacksList.map(pack => <tr className={s.tr} key={pack._id}>\r\n                                <td className={s.td} onClick={() => onClickShowCardsHandle(pack._id, pack.name)}>{pack.name}</td>\r\n                                <td className={s.td}>{pack.cardsCount}</td>\r\n                                <td className={s.td}>{formattingDate(pack.updated)}</td>\r\n                                <td className={s.td}>{pack.user_name}</td>\r\n                                <td className={s.td}>\r\n                                    <div className={s.btnBox} >\r\n                                        {idAuthorizedUser === pack.user_id &&\r\n                                        <>\r\n                                            <AlertDialogForDeleteValue packName={pack.name}\r\n                                                                       packId={pack._id}\r\n                                                                       open={openAlertDialogForDeletePack}\r\n                                                                       setOpenAlertDialogForDeletePack={setOpenAlertDialogForDeletePack}\r\n                                                                       alertTitle={\"Delete Pack?\"}\r\n                                                                       type={\"pack\"}/>\r\n                                            <AlertDialogForEditValue packName={pack.name}\r\n                                                                     open={openAlertDialogForEditPack}\r\n                                                                     setOpenAlertDialogForEditPack={setOpenAlertDialogForEditPack}\r\n                                                                     packId={pack._id}\r\n                                                                     alertTitle={\"Change Pack name?\"}\r\n                                                                     type={\"pack\"}\r\n                                                                     inputLabel={\"New Pack name\"}/>\r\n                                        </>}\r\n                                        <BtnActions name='Learn' style={styleBtnLearn}\r\n                                                    onClick={() => onClickShowLearnPageHandle(pack._id, pack.name)}/>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>)}\r\n                            </tbody>\r\n                        </div>\r\n                    </table>\r\n                </div>\r\n\r\n                        <div className={s.contentRightBottom}>\r\n                            <UsePagination count={Math.ceil(totalCount / pageCount)} page={currentPage}\r\n                                           onChange={onChangePage}/>\r\n                            <div className={s.choiceCard}>\r\n                                <span>Show</span>\r\n                                <SelectLabels value={pageCount}\r\n                                              onChange={onChangePacksCountPerPage}/>\r\n                                <span>Cards per Page</span>\r\n                            </div>\r\n                        </div>\r\n                    </>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default PacksList","import s from \"./CardsList.module.css\"\r\nimport React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {\r\n    requestCards,\r\n    setCardsPage,\r\n    setCardsPageCount, setSearchCardName,\r\n} from \"../../redux/cardPacksReducer\";\r\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\r\nimport {Button} from \"@mui/material\";\r\nimport {formattingDate} from \"../../utils/formattingDate\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\nimport ArrowBackOutlinedIcon from \"@mui/icons-material/ArrowBackOutlined\";\r\nimport AlertDialogForNewValue from \"../PacksList/AlertDialogForNewValue\";\r\nimport AlertDialogForEditValue from \"../PacksList/AlertDialogForEditValue\";\r\nimport AlertDialogForDeleteValue from \"../PacksList/AlertDialogForDeleteValue\";\r\nimport SelectLabels from \"../PacksList/Select/Select\";\r\nimport UsePagination from \"../PacksList/Pagination/UsePagination\";\r\nimport MainRating from \"./Rating/Rating\";\r\n\r\n\r\nexport const CardsList = () => {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppStateType) => state.auth.isLoggedIn)\r\n    const appStatus = useSelector((state: AppStateType) => state.app.status)\r\n    const page = useSelector((state: AppStateType) => state.cardPacks.currentCards.page)\r\n    const currentPackName = useSelector((state: AppStateType) => state.cardPacks.currentPackName)\r\n    const pageCount = useSelector((state: AppStateType) => state.cardPacks.currentCards.pageCount)\r\n    const totalCount = useSelector((state: AppStateType) => state.cardPacks.currentCards.cardsTotalCount)\r\n    const dataCardsList = useSelector((state: AppStateType) => state.cardPacks.currentCards.cards);\r\n    const currentPackId = useSelector((state: AppStateType) => state.cardPacks.currentCardsPackId);\r\n    const cardUserID = useSelector((state: AppStateType) => state.cardPacks.currentCards.packUserId);\r\n    const sortCards = useSelector((state: AppStateType) => state.cardPacks.currentCards.sortCards);\r\n    const idAuthorizedUser = useSelector<AppStateType, string>(state => state.auth.user?._id!);\r\n    const cardName = useSelector((state: AppStateType) => state.cardPacks.currentCards.cardName);\r\n\r\n\r\n\r\n    const [openAlertDialogForDeletePack, setOpenAlertDialogForDeletePack] = React.useState(false);\r\n    const [openAlertDialogForEditPack, setOpenAlertDialogForEditPack] = React.useState(false);\r\n    const [openAlertDialogForNewPack, setOpenAlertDialogForNewPack] = React.useState(false);\r\n\r\n    const [searchCardsName, setSearchCardsName] = React.useState('');\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn) {\r\n            history.push(PATH.LOGIN)\r\n        }\r\n        isLoggedIn && dispatch(requestCards())\r\n    }, [page, pageCount, currentPackId, sortCards, isLoggedIn, cardName])\r\n\r\n\r\n\r\n\r\n    const onChangePage = (value: number) => {\r\n        dispatch(setCardsPage({page: value}))\r\n    }\r\n    const onChangeCardsCountPerPage = (value: string) => {\r\n        dispatch(setCardsPageCount({pageCount: +value}))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            dispatch(setSearchCardName({currentCardName: searchCardsName}))\r\n        }, 1000)\r\n        return () => {\r\n            clearTimeout(handler);\r\n            dispatch(setSearchCardName({currentCardName: ''}))\r\n        }\r\n    }, [searchCardsName])\r\n    const searchCardNameHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchCardsName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.cardsList} >\r\n            {appStatus === 'loading' && <Preloader/>}\r\n            <div>\r\n                <div className={s.titleBox}>\r\n                    <Button className={s.rowBtn} style={{transform: 'translate(-15px)'}}\r\n                            variant={\"text\"}\r\n                            color={\"inherit\"}\r\n                            startIcon={<ArrowBackOutlinedIcon/>}\r\n                            onClick={() => {\r\n                                history.goBack()\r\n                            }}>{currentPackName}</Button>\r\n\r\n                </div>\r\n                <div className={s.searchBox}>\r\n                    <input className={s.search} type={\"text\"} value={searchCardsName} onChange={searchCardNameHandler} placeholder={'search'}/>\r\n                    {idAuthorizedUser === cardUserID && <AlertDialogForNewValue open={openAlertDialogForNewPack}\r\n                                             setOpenAlertDialogForNewPack={setOpenAlertDialogForNewPack}\r\n                                             alertTitle={\"Add new card?\"}\r\n                                             buttonName={\"Add new card\"}\r\n                                             inputLabel={\"Card name\"}\r\n                                             type={\"card\"}/>}\r\n                </div>\r\n                {dataCardsList.length ?\r\n                <div>\r\n                    <table className={s.table}>\r\n                        <thead className={s.tableHeader}>\r\n                        <tr className={s.tr}>\r\n                            <th className={s.th}>Question</th>\r\n                            <th className={s.th}>Answer</th>\r\n                            <th className={s.th}>Last updated</th>\r\n                            <th className={s.th}>Grade</th>\r\n                            {idAuthorizedUser === cardUserID &&<th className={s.th}>Actions</th>}\r\n                        </tr>\r\n                        </thead>\r\n            <div className={s.scrollTableBody}>\r\n                        <tbody>\r\n                        {dataCardsList.map(card => <tr className={s.tr} key={card._id}>\r\n                            <td className={s.td}>{card.question}</td>\r\n                            <td className={s.td}>{card.answer}</td>\r\n                            <td className={s.td}>{formattingDate(card.updated)}</td>\r\n                            <td className={s.td}><MainRating rating={card.grade}/></td>\r\n                            {idAuthorizedUser === card.user_id &&<td className={s.td}>\r\n                                <div className={s.btnBox} key={card._id}>\r\n                                    <AlertDialogForDeleteValue packName={card.question}\r\n                                                               packId={card._id}\r\n                                                               open={openAlertDialogForDeletePack}\r\n                                                               setOpenAlertDialogForDeletePack={setOpenAlertDialogForDeletePack}\r\n                                                               alertTitle={\"Delete Card?\"}\r\n                                                               type={\"card\"}/>\r\n                                    <AlertDialogForEditValue packName={card.question}\r\n                                                             open={openAlertDialogForEditPack}\r\n                                                             setOpenAlertDialogForEditPack={setOpenAlertDialogForEditPack}\r\n                                                             packId={card._id}\r\n                                                             alertTitle={\"Change Card info?\"}\r\n                                                             type={\"card\"}\r\n                                                             inputLabel={\"New Card name\"}/>\r\n                                </div>\r\n                            </td>}\r\n                        </tr>)}\r\n                        </tbody>\r\n                    </div>\r\n                    </table>\r\n                </div> : <p className={s.centerText}> This pack is empty. Click add new card to fill this pack</p>}\r\n                {dataCardsList.length ? <div className={s.contentBottom}>\r\n                    <UsePagination count={Math.ceil(totalCount / pageCount)} page={page} onChange={onChangePage}/>\r\n                    <div className={s.choiceCard}>\r\n                        <span>Show</span>\r\n                        <SelectLabels value={pageCount}\r\n                                      onChange={onChangeCardsCountPerPage}/>\r\n                        <span>Cards per Page</span>\r\n                    </div>\r\n                </div>: <></>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Card from \"@mui/material/Card\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {CardType, fetchUpdateCard, requestCards, setCurrentCardsPackID} from \"../../redux/cardPacksReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Button, CardActions, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@mui/material\";\r\nimport {Preloader} from \"../../components/common/Preloader/Preloader\";\r\n\r\n\r\nconst grades = [\r\n    'Did not know',\r\n    'Forgot',\r\n    'Thought for a long time',\r\n    'Confused',\r\n    'Knew',\r\n]\r\n\r\nconst getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce(\r\n        (acc, card) => acc + (6 - card.grade) * (6 - card.grade),\r\n        0\r\n    );\r\n    const rand = Math.random() * sum\r\n    const res = cards.reduce(\r\n        (acc: { sum: number; id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade)\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        },\r\n        {sum: 0, id: -1}\r\n    )\r\n\r\n    return cards[res.id + 1]\r\n}\r\n\r\nexport const LearnPage = () => {\r\n\r\n    const cards = useSelector((state: AppStateType) => state.cardPacks.currentCards.cards)\r\n    const cardName = useSelector((state: AppStateType) => state.cardPacks.currentPackName)\r\n    const currentCardsPackId = useSelector((state: AppStateType) => state.cardPacks.currentCardsPackId)\r\n    const appStatus = useSelector((state: AppStateType) => state.app.status)\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const [isChecked, setIsChecked] = useState<boolean>(false)\r\n    const [first, setFirst] = useState<boolean>(true)\r\n    const [grade, setGrade] = useState<number>(0)\r\n    const [card, setCard] = useState<CardType>({\r\n        answer: 'answer fake',\r\n        answerImg: null,\r\n        answerVideo: null,\r\n        cardsPack_id: '',\r\n        comments: null,\r\n        created: '',\r\n        grade: 0,\r\n        question: 'question fake',\r\n        questionImg: null,\r\n        questionVideo: null,\r\n        shots: 0,\r\n        updated: \"\",\r\n        user_id: '',\r\n        _id: 'fake',\r\n        rating: 0\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(requestCards())\r\n            setFirst(false)\r\n        }\r\n\r\n        if (cards.length > 0 && !first) setCard(getCard(cards))\r\n\r\n    }, [dispatch, cards, first])\r\n\r\n    const onNextHandler = () => {\r\n        setIsChecked(false)\r\n\r\n        if (cards.length > 0) {\r\n            dispatch(setCurrentCardsPackID({currentCardsPackId}))\r\n            dispatch(fetchUpdateCard(grade, card._id))\r\n            setCard(getCard(cards))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card sx={{width: 413, minHeight: 300, margin: '100px auto'}}>\r\n            {appStatus === 'loading' && <Preloader/>}\r\n            <h2>Learn ' {cardName} '</h2>\r\n            {card.question === 'question fake' ? (\r\n                <p style={{textAlign: 'center'}}>\r\n                    <b>No questions in this Pack!!!</b>\r\n                </p>\r\n            ) : (\r\n                <p>\r\n                    <b>Question</b>: ' {card.question} '\r\n                </p>\r\n            )}\r\n\r\n            {!isChecked && (\r\n                <CardActions>\r\n                    <Button onClick={() => {\r\n                        history.goBack()\r\n                    }}>\r\n                        Cancel\r\n                    </Button>\r\n                    {card.question !== 'question fake' && (\r\n                        <Button onClick={() => setIsChecked(true)}>\r\n                            Show answer\r\n                        </Button>\r\n                    )}\r\n                </CardActions>\r\n            )}\r\n\r\n            {isChecked && (\r\n                <>\r\n                    <p><b>Answer</b>: ' {card.answer} '</p>\r\n\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">\r\n                            Rate yourself:\r\n                        </FormLabel>\r\n\r\n                        <RadioGroup aria-label='Rate' name='radio-buttons-group'>\r\n                            {grades.map((g: string, i: number) => (\r\n                                <FormControlLabel\r\n                                    key={i}\r\n                                    value={i + 1}\r\n                                    control={<Radio/>}\r\n                                    label={g}\r\n                                    onChange={() => setGrade(i + 1)}\r\n                                />\r\n                            ))}\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n\r\n                    <CardActions>\r\n                        <Button onClick={() => {\r\n                            history.goBack()\r\n                        }}>Cancel</Button>\r\n                        <Button onClick={onNextHandler}>Next</Button>\r\n                    </CardActions>\r\n                </>\r\n            )}\r\n        </Card>\r\n    )\r\n}\r\n","import {Redirect, Switch} from \"react-router-dom\"\r\nimport SignUp from \"./signUp/SignUP\";\r\nimport Profile from \"./Profile/Profile\";\r\nimport Error404 from \"./Error404\";\r\nimport ForgotPassword from \"./ForgotPassword/ForgotPassword\";\r\nimport NewPassword from \"./ForgotPassword/NewPassword\";\r\nimport Test from \"./Test\";\r\nimport {Route} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport TempHeader from \"../temp/TempHeader\";\r\nimport {LoginPage} from \"./Login/LoginPage\";\r\nimport CheckEmail from \"./ForgotPassword/CheckEmail\";\r\nimport PacksList from \"./PacksList/PacksList\";\r\nimport {CardsList} from \"./CardsList/CardsList\";\r\nimport {LearnPage} from \"./LearnPage/LearnPage\";\r\n\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    SIGN_UP: '/signup',\r\n    PROFILE: '/profile',\r\n    ERROR_404: '/error404',\r\n    FORGOT_PASSWORD: '/forgotpassword',\r\n    NEW_PASSWORD: '/set-new-password/:token',\r\n    CHECK_EMAIL: '/checkemail',\r\n    TEST: '/test',\r\n    PACKS_LIST:'/packs-list',\r\n    CARDS_LIST:'/cards-list',\r\n    LEARN_PAGE:'/learn-page'\r\n}\r\n\r\n\r\nfunction Routes() {\r\n\r\n    return (\r\n        <>\r\n            {/*<TempHeader/>*/}\r\n                <Switch>\r\n                    <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                    <Route path={PATH.LOGIN} render={() => <LoginPage/>}/>\r\n                    <Route path={PATH.SIGN_UP} render={() => <SignUp/>}/>\r\n                    <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                    <Route path={PATH.FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                    <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                    <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                    <Route path={PATH.CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n                    <Route path={PATH.PACKS_LIST} render={() => <PacksList/>}/>\r\n                    <Route path={PATH.CARDS_LIST} render={() => <CardsList/>}/>\r\n                    <Route path={PATH.LEARN_PAGE} render={() => <LearnPage/>}/>\r\n                    <Route render={() => <Error404/>}/>\r\n                </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Routes;","import s from \"./HeaderBtn.module.css\"\r\n\r\n\r\nexport default function HeaderBtn(props: any) {\r\n\r\n\r\nconst priorityStyle = props.isActive ? `${s.headerBtn} ${s.active} `: `${s.headerBtn}`\r\n\r\n  return (\r\n    \r\n      <button className={priorityStyle} id={props.id} onClick={props.onClick}>\r\n        <img src={props.img} alt=\"\" />\r\n        {props.name}\r\n      </button>\r\n    \r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/pack-list.5e469654.svg\";","export default __webpack_public_path__ + \"static/media/profile.36eee9e3.svg\";","import HeaderBtn from \"./HeaderBtn/HeaderBtn\";\r\nimport s from \"./HeaderMain.module.css\"\r\nimport imgPackList from \"../assets/images/pack-list.svg\"\r\nimport imgProfile from \"../assets/images/profile.svg\"\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {PATH} from \"../pages/Routes\";\r\n\r\n\r\n\r\nexport default function HeaderMain() {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    let path = location.pathname\r\n\r\n\r\n    const routeChange = (e: any) =>{\r\n        let buttonID = e.target.id\r\n        buttonID === 'packs' ? history.push(PATH.PACKS_LIST) : history.push(PATH.PROFILE)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.headerMain}>\r\n            <div className=\"container\">\r\n                <div className={s.wrapper}>\r\n                    <h1 className={s.title}>It-incubator</h1>\r\n                    <div className={s.btnWrap}>\r\n                        <HeaderBtn isActive={path === '/packs-list'} id=\"packs\" onClick={routeChange} name=\"Packs list\" img={imgPackList}/>\r\n                        <HeaderBtn isActive={path === '/profile'} id=\"profile\" onClick={routeChange} name=\"Profile\" img={imgProfile}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Routes from \"./pages/Routes\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializingTC} from \"./redux/authReducer\";\r\nimport HeaderMain from './HeaderMain/HeaderMain';\r\nimport {AppStateType} from \"./redux/store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const isInitialized = useSelector<AppStateType, boolean>(state=>state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state=>state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( ()=>{\r\n        if (!isLoggedIn) {\r\n            dispatch(initializingTC())\r\n        }\r\n    },[dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader />\r\n    }\r\n\r\n\r\nreturn (        \r\n        <div className=\"wrapper\">            \r\n\r\n            <HashRouter>\r\n                <HeaderMain/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </div>      \r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunkMiddleWare from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {cardPacksReducer} from \"./cardPacksReducer\";\r\n\r\n\r\nlet rootReducers = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    cardPacks: cardPacksReducer,\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\nexport type storeType = typeof store\r\nconst store = createStore( rootReducers, applyMiddleware(thunkMiddleWare))\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signUp\":\"SignUp_signUp__3r9dd\",\"subtitle\":\"SignUp_subtitle__2yWk-\",\"FormBox\":\"SignUp_FormBox__NLcRu\",\"registrWrap\":\"SignUp_registrWrap__3kUIN\",\"label\":\"SignUp_label__30AYO\",\"field\":\"SignUp_field__36SaB\",\"inputWrap\":\"SignUp_inputWrap__97QWp\",\"btnWrap\":\"SignUp_btnWrap__-goAU\",\"btnLeft\":\"SignUp_btnLeft__1hCsN\",\"btnRight\":\"SignUp_btnRight__BqyTw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPassword\":\"ForgotPassword_forgotPassword__TwWaw\",\"formBox\":\"ForgotPassword_formBox__1iaYd\",\"subtitle\":\"ForgotPassword_subtitle__2Hxih\",\"field\":\"ForgotPassword_field__238Ff\",\"inputWrap\":\"ForgotPassword_inputWrap__1Zrxd\",\"textLight\":\"ForgotPassword_textLight__1UNz_\",\"btnBlue\":\"ForgotPassword_btnBlue__1LgRH\",\"boxLink\":\"ForgotPassword_boxLink__1yscQ\",\"linkLight\":\"ForgotPassword_linkLight__22yYD\",\"linkBlue\":\"ForgotPassword_linkBlue__2YIh4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__e8ne4\",\"subtitle\":\"Login_subtitle__1QHzt\",\"formBox\":\"Login_formBox__2Z0y3\",\"linkTransparent\":\"Login_linkTransparent__1e87P\",\"btnBlue\":\"Login_btnBlue__2gApp\",\"linkWrap\":\"Login_linkWrap__XgNzK\",\"textLight\":\"Login_textLight__1CJPu\",\"linkBlue\":\"Login_linkBlue__2zuUb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__ja_z0\",\"subtitle\":\"NewPassword_subtitle__3_FA7\",\"formBox\":\"NewPassword_formBox__8KU5j\",\"inputWrap\":\"NewPassword_inputWrap__1GNCi\",\"field\":\"NewPassword_field__3iO08\",\"textLight\":\"NewPassword_textLight__21JB-\",\"btnBlue\":\"NewPassword_btnBlue__9WYCa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"SuperInputText_inputWrap__3-vJ3\",\"superInput\":\"SuperInputText_superInput__3bIrW\",\"placeHolder\":\"SuperInputText_placeHolder__jNWZW\",\"hidePlaceHolder\":\"SuperInputText_hidePlaceHolder__mg2sB\",\"errorInput\":\"SuperInputText_errorInput__yMflc\",\"error\":\"SuperInputText_error__3fTGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Error404_wrap__1IT3M\",\"notfound\":\"Error404_notfound__1iP_a\",\"notfound404\":\"Error404_notfound404__1xmNg\",\"navLink\":\"Error404_navLink__3nnfZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkEmail\":\"CheckEmail_checkEmail__GlaTj\",\"letterImg\":\"CheckEmail_letterImg__2fLlW\",\"subtitle\":\"CheckEmail_subtitle__316C0\",\"textLight\":\"CheckEmail_textLight__inZ5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerMain\":\"HeaderMain_headerMain__1JBPr\",\"wrapper\":\"HeaderMain_wrapper__18nEh\",\"title\":\"HeaderMain_title__1TRVL\",\"btnWrap\":\"HeaderMain_btnWrap__2LyG1\"};"],"sourceRoot":""}